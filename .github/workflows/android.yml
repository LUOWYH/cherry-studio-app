# GitHub Workflow 名称
name: Build Android APK

# 触发工作流程的事件
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# 定义工作任务
jobs:
  build-android:
    # 指定运行环境
    runs-on: ubuntu-latest

    steps:
      # 1. 检出代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. 设置 Node.js 环境
      # 注意：这里的 'cache' 选项已移除，以避免与 Corepack 冲突。
      # 我们将在后面手动设置缓存。
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      # 3. 启用 Corepack (必须在设置 Node 之后，安装依赖之前)
      - name: Enable Corepack
        run: corepack enable

      # 4. 手动缓存 Yarn 依赖 (新步骤)
      - name: Cache Yarn dependencies
        uses: actions/cache@v4
        with:
          path: .yarn/cache
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      # 5. 安装项目依赖
      - name: Install dependencies
        run: yarn install --immutable

      # 6. 设置 Java 环境
      - name: Set up Java (JDK)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # 7. 设置 Gradle 并缓存依赖
      - name: Setup Gradle and Cache
        uses: gradle/actions/setup-gradle@v3

      # 8. 生成原生 Android 项目
      - name: Generate native Android project
        run: npx expo prebuild --platform android --no-install
        
      # 9. 为 Gradle 配置更多内存
      - name: Configure Gradle memory
        run: echo "org.gradle.jvmargs=-Xmx4g" >> ./android/gradle.properties

      # 10. 构建 Android APK
      - name: Build Android APK
        run: |
          cd android
          ./gradlew assembleRelease --build-cache
        
      # 11. 上传构建产物 (APK)
      - name: Upload Android APK
        uses: actions/upload-artifact@v4
        with:
          name: Android-Build-APK
          path: android/app/build/outputs/apk/release/app-release.apk

